// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    //decode
    //decodeAR
    Not(in=instruction[15], out=deARNot);
    And(a=instruction[5], b=instruction[15], out=deARAnd);
    Or(a=deARNot, b=deARAnd, out=deAR);
    //decodeDR
    And(a=instruction[15], b=instruction[4], out=deDR);
    //decodeMux
    And(a=instruction[12], b=instruction[15], out=deM);
    //decodePC
    And(a=ng, b=instruction[2], out=dePCins2);
    And(a=zr, b=instruction[1], out=dePCins1);
    Or(a=dePCins2, b=dePCins1, out=dePC1);
    Or(a=ng, b=zr, out=ngorzr);
    Not(in=ngorzr, out=Notngorzr);
    And(a=Notngorzr, b=instruction[0], out=dePC2);
    Or(a=dePC1, b=dePC2, out=dePC3);
    And(a=instruction[15], b=dePC3, out=dePC);

    //control
    Mux16(a[0..14]=instruction[0..14], a[15]=false, b=outALU, sel=instruction[15], out=toAR);
    ARegister(in=toAR, load=deAR, out=outAR, out[0..14]=addressM);
    Mux16(a=outAR, b=inM, sel=deM, out=MtoALU);
    DRegister(in=outALU, load=deDR, out=outDR);
    ALU(x=outDR, y=MtoALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=outALU, ng=ng, zr=zr);
    PC(in=outAR, inc=true, reset=reset, load=dePC, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=writeM);
}