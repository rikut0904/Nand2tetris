// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	//// Replace this comment with your code.
    //decode
    And(a=instruction[15], b=instruction[4], out=toDR);
    Not(in=instruction[15], out=iNot);
    And(a=instruction[5], b=instruction[15], out=515And);
    Or(a=iNot, b=515And, out=toAR);
    And(a=instruction[5], b=instruction[15], out=toMux2);
    And(a=outng, b=instruction[2], out=ng2);
    And(a=outzr, b=instruction[1], out=zr2);
    Or(a=ng2, b=zr2, out=toOraPC);
    Or(a=ng, b=zr, out=ngzr);
    Or(a=ngzr, b=instruction[0], out=toOrbPC);
    Or(a=toOraPC, b=toOrbPC, out=toPC);
    
    //control
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMi);
    ARegister(in=outMi, load=toAR, out=outAR, out[0..14]=addressM);
    Mux16(a=outAR, b=inM, sel=toMux2, out=outAM);
    DRegister(in=outALU, load=toDR, out=outDR);
    ALU(x=outDR, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], zr=outzr, ng=outng, out=outALU, out=outM);
    And(a=instruction[3], b=instruction[15], out=writeM)
    PC(in=outAR, inc=True, load=toPC, reset=reset, out[0..14]=pc);
    
}